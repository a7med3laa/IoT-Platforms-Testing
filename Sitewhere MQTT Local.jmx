<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">E:\Prometheus 3.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <longProp name="ThreadGroup.start_time">1513460377000</longProp>
        <longProp name="ThreadGroup.end_time">1513460377000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Server IP" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="IP" elementType="Argument">
              <stringProp name="Argument.name">IP</stringProp>
              <stringProp name="Argument.value">192.168.1.4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Temprature Readings" enabled="true">
          <stringProp name="maximumValue">60</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">Temp</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test 10 Sensor" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">10</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">10</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">num</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="Sensor ${num} - ${__threadNum}" enabled="true">
              <stringProp name="mqtt.keystore_file_path"></stringProp>
              <stringProp name="mqtt.clientcert_file_path"></stringProp>
              <stringProp name="mqtt.conn_keep_alive">300</stringProp>
              <stringProp name="mqtt.conn_attampt_max">0</stringProp>
              <stringProp name="mqtt.keep_time">1800</stringProp>
              <stringProp name="mqtt.client_id_prefix">ExamplePublish</stringProp>
              <boolProp name="mqtt.client_id_suffix">false</boolProp>
              <stringProp name="mqtt.reconn_attampt_max">0</stringProp>
              <stringProp name="mqtt.conn_timeout">50</stringProp>
              <boolProp name="mqtt.dual_ssl_authentication">false</boolProp>
              <stringProp name="mqtt.keystore_password"></stringProp>
              <stringProp name="mqtt.clientcert_password"></stringProp>
              <stringProp name="mqtt.port">1883</stringProp>
              <stringProp name="mqtt.protocol">TCP</stringProp>
              <stringProp name="mqtt.server">${IP}</stringProp>
              <stringProp name="mqtt.user_name"></stringProp>
              <stringProp name="mqtt.password"></stringProp>
              <stringProp name="mqtt.topic_name">SiteWhere/input/json</stringProp>
              <stringProp name="mqtt.qos_level">1</stringProp>
              <boolProp name="mqtt.add_timestamp">false</boolProp>
              <stringProp name="mqtt.message_type">String</stringProp>
              <stringProp name="mqtt.message_type_fixed_length">1024</stringProp>
              <stringProp name="mqtt.message_to_sent">{
    &quot;hardwareId&quot;: &quot;${num}&quot;,
    &quot;type&quot;: &quot;DeviceMeasurements&quot;,
    &quot;request&quot;: {
        &quot;measurements&quot;: { 
        	&quot;temp&quot;: ${Temp}
        },
        &quot;updateState&quot;: true
     }
}</stringProp>
            </net.xmeter.samplers.PubSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test 100 Sensor" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">100</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">100</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">num</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="Sensor ${num} - ${__threadNum}" enabled="true">
              <stringProp name="mqtt.keystore_file_path"></stringProp>
              <stringProp name="mqtt.clientcert_file_path"></stringProp>
              <stringProp name="mqtt.conn_keep_alive">300</stringProp>
              <stringProp name="mqtt.conn_attampt_max">0</stringProp>
              <stringProp name="mqtt.keep_time">1800</stringProp>
              <stringProp name="mqtt.client_id_prefix">ExamplePublish</stringProp>
              <boolProp name="mqtt.client_id_suffix">false</boolProp>
              <stringProp name="mqtt.reconn_attampt_max">0</stringProp>
              <stringProp name="mqtt.conn_timeout">10</stringProp>
              <boolProp name="mqtt.dual_ssl_authentication">false</boolProp>
              <stringProp name="mqtt.keystore_password"></stringProp>
              <stringProp name="mqtt.clientcert_password"></stringProp>
              <stringProp name="mqtt.port">1883</stringProp>
              <stringProp name="mqtt.protocol">TCP</stringProp>
              <stringProp name="mqtt.server">${IP}</stringProp>
              <stringProp name="mqtt.user_name"></stringProp>
              <stringProp name="mqtt.password"></stringProp>
              <stringProp name="mqtt.topic_name">SiteWhere/input/json</stringProp>
              <stringProp name="mqtt.qos_level">0</stringProp>
              <boolProp name="mqtt.add_timestamp">false</boolProp>
              <stringProp name="mqtt.message_type">String</stringProp>
              <stringProp name="mqtt.message_type_fixed_length">1024</stringProp>
              <stringProp name="mqtt.message_to_sent">{
    &quot;hardwareId&quot;: &quot;${num}&quot;,
    &quot;type&quot;: &quot;DeviceMeasurements&quot;,
    &quot;request&quot;: {
        &quot;measurements&quot;: { 
        	&quot;temp&quot;: ${Temp}
        },
        &quot;updateState&quot;: true
     }
}</stringProp>
            </net.xmeter.samplers.PubSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test 200 Sensor" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">200</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">200</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">num</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="Sensor ${num} - ${__threadNum}" enabled="true">
              <stringProp name="mqtt.keystore_file_path"></stringProp>
              <stringProp name="mqtt.clientcert_file_path"></stringProp>
              <stringProp name="mqtt.conn_keep_alive">300</stringProp>
              <stringProp name="mqtt.conn_attampt_max">0</stringProp>
              <stringProp name="mqtt.keep_time">1800</stringProp>
              <stringProp name="mqtt.client_id_prefix">ExamplePublish</stringProp>
              <boolProp name="mqtt.client_id_suffix">false</boolProp>
              <stringProp name="mqtt.reconn_attampt_max">0</stringProp>
              <stringProp name="mqtt.conn_timeout">10</stringProp>
              <boolProp name="mqtt.dual_ssl_authentication">false</boolProp>
              <stringProp name="mqtt.keystore_password"></stringProp>
              <stringProp name="mqtt.clientcert_password"></stringProp>
              <stringProp name="mqtt.port">1883</stringProp>
              <stringProp name="mqtt.protocol">TCP</stringProp>
              <stringProp name="mqtt.server">${IP}</stringProp>
              <stringProp name="mqtt.user_name"></stringProp>
              <stringProp name="mqtt.password"></stringProp>
              <stringProp name="mqtt.topic_name">SiteWhere/input/json</stringProp>
              <stringProp name="mqtt.qos_level">0</stringProp>
              <boolProp name="mqtt.add_timestamp">false</boolProp>
              <stringProp name="mqtt.message_type">String</stringProp>
              <stringProp name="mqtt.message_type_fixed_length">1024</stringProp>
              <stringProp name="mqtt.message_to_sent">{
    &quot;hardwareId&quot;: &quot;${num}&quot;,
    &quot;type&quot;: &quot;DeviceMeasurements&quot;,
    &quot;request&quot;: {
        &quot;measurements&quot;: { 
        	&quot;temp&quot;: ${Temp}
        },
        &quot;updateState&quot;: true
     }
}</stringProp>
            </net.xmeter.samplers.PubSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test 500 Sensor" enabled="true"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">500</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">500</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">num</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="Sensor ${num} - ${__threadNum}" enabled="true">
              <stringProp name="mqtt.keystore_file_path"></stringProp>
              <stringProp name="mqtt.clientcert_file_path"></stringProp>
              <stringProp name="mqtt.conn_keep_alive">300</stringProp>
              <stringProp name="mqtt.conn_attampt_max">0</stringProp>
              <stringProp name="mqtt.keep_time">1800</stringProp>
              <stringProp name="mqtt.client_id_prefix">ExamplePublish</stringProp>
              <boolProp name="mqtt.client_id_suffix">false</boolProp>
              <stringProp name="mqtt.reconn_attampt_max">0</stringProp>
              <stringProp name="mqtt.conn_timeout">10</stringProp>
              <boolProp name="mqtt.dual_ssl_authentication">false</boolProp>
              <stringProp name="mqtt.keystore_password"></stringProp>
              <stringProp name="mqtt.clientcert_password"></stringProp>
              <stringProp name="mqtt.port">1883</stringProp>
              <stringProp name="mqtt.protocol">TCP</stringProp>
              <stringProp name="mqtt.server">${IP}</stringProp>
              <stringProp name="mqtt.user_name"></stringProp>
              <stringProp name="mqtt.password"></stringProp>
              <stringProp name="mqtt.topic_name">SiteWhere/input/json</stringProp>
              <stringProp name="mqtt.qos_level">0</stringProp>
              <boolProp name="mqtt.add_timestamp">false</boolProp>
              <stringProp name="mqtt.message_type">String</stringProp>
              <stringProp name="mqtt.message_type_fixed_length">1024</stringProp>
              <stringProp name="mqtt.message_to_sent">{
    &quot;hardwareId&quot;: &quot;${num}&quot;,
    &quot;type&quot;: &quot;DeviceMeasurements&quot;,
    &quot;request&quot;: {
        &quot;measurements&quot;: { 
        	&quot;temp&quot;: ${Temp}
        },
        &quot;updateState&quot;: true
     }
}</stringProp>
            </net.xmeter.samplers.PubSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test 800 Sensor" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">800</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">800</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">num</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="Sensor ${num} - ${__threadNum}" enabled="true">
              <stringProp name="mqtt.keystore_file_path"></stringProp>
              <stringProp name="mqtt.clientcert_file_path"></stringProp>
              <stringProp name="mqtt.conn_keep_alive">300</stringProp>
              <stringProp name="mqtt.conn_attampt_max">0</stringProp>
              <stringProp name="mqtt.keep_time">1800</stringProp>
              <stringProp name="mqtt.client_id_prefix">ExamplePublish</stringProp>
              <boolProp name="mqtt.client_id_suffix">false</boolProp>
              <stringProp name="mqtt.reconn_attampt_max">0</stringProp>
              <stringProp name="mqtt.conn_timeout">30</stringProp>
              <boolProp name="mqtt.dual_ssl_authentication">false</boolProp>
              <stringProp name="mqtt.keystore_password"></stringProp>
              <stringProp name="mqtt.clientcert_password"></stringProp>
              <stringProp name="mqtt.port">1883</stringProp>
              <stringProp name="mqtt.protocol">TCP</stringProp>
              <stringProp name="mqtt.server">${IP}</stringProp>
              <stringProp name="mqtt.user_name"></stringProp>
              <stringProp name="mqtt.password"></stringProp>
              <stringProp name="mqtt.topic_name">SiteWhere/input/json</stringProp>
              <stringProp name="mqtt.qos_level">0</stringProp>
              <boolProp name="mqtt.add_timestamp">false</boolProp>
              <stringProp name="mqtt.message_type">String</stringProp>
              <stringProp name="mqtt.message_type_fixed_length">1024</stringProp>
              <stringProp name="mqtt.message_to_sent">{
    &quot;hardwareId&quot;: &quot;${num}&quot;,
    &quot;type&quot;: &quot;DeviceMeasurements&quot;,
    &quot;request&quot;: {
        &quot;measurements&quot;: { 
        	&quot;temp&quot;: ${Temp}
        },
        &quot;updateState&quot;: true
     }
}</stringProp>
            </net.xmeter.samplers.PubSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test 1000 Sensor" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1000</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">1000</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">num</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="Sensor ${num} - ${__threadNum}" enabled="true">
              <stringProp name="mqtt.keystore_file_path"></stringProp>
              <stringProp name="mqtt.clientcert_file_path"></stringProp>
              <stringProp name="mqtt.conn_keep_alive">300</stringProp>
              <stringProp name="mqtt.conn_attampt_max">0</stringProp>
              <stringProp name="mqtt.keep_time">1800</stringProp>
              <stringProp name="mqtt.client_id_prefix">ExamplePublish</stringProp>
              <boolProp name="mqtt.client_id_suffix">false</boolProp>
              <stringProp name="mqtt.reconn_attampt_max">0</stringProp>
              <stringProp name="mqtt.conn_timeout">10</stringProp>
              <boolProp name="mqtt.dual_ssl_authentication">false</boolProp>
              <stringProp name="mqtt.keystore_password"></stringProp>
              <stringProp name="mqtt.clientcert_password"></stringProp>
              <stringProp name="mqtt.port">1883</stringProp>
              <stringProp name="mqtt.protocol">TCP</stringProp>
              <stringProp name="mqtt.server">${IP}</stringProp>
              <stringProp name="mqtt.user_name"></stringProp>
              <stringProp name="mqtt.password"></stringProp>
              <stringProp name="mqtt.topic_name">SiteWhere/input/json</stringProp>
              <stringProp name="mqtt.qos_level">0</stringProp>
              <boolProp name="mqtt.add_timestamp">false</boolProp>
              <stringProp name="mqtt.message_type">String</stringProp>
              <stringProp name="mqtt.message_type_fixed_length">1024</stringProp>
              <stringProp name="mqtt.message_to_sent">{
    &quot;hardwareId&quot;: &quot;${num}&quot;,
    &quot;type&quot;: &quot;DeviceMeasurements&quot;,
    &quot;request&quot;: {
        &quot;measurements&quot;: { 
        	&quot;temp&quot;: ${Temp}
        },
        &quot;updateState&quot;: true
     }
}</stringProp>
            </net.xmeter.samplers.PubSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check Prometheus" enabled="true">
          <stringProp name="IfController.condition">${__BeanShell(ctx.getThreadNum() == 99)} //last thread in test
// &amp;&amp; vars.getIteration() == 1)</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Prometheus - ${__BeanShell(vars.getIteration();,)}" enabled="true">
            <stringProp name="BeanShellSampler.query">

test=vars.getObject(&quot;test&quot;);
test.runTest(vars.getIteration());</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import Testing.TestPerformance;


try {
 
TestPerformance test= new TestPerformance();
vars.putObject(&quot;test&quot;,test);
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections"/>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
